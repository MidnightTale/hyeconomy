plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'maven-publish'
}

group = 'xyz.hynse'
version = '1.1-SNAPSHOT-1'
repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
}
dependencies {
    compileOnly "dev.folia:folia-api:1.20.1-R0.1-SNAPSHOT"

    // Use a relocated version of HikariCP
    implementation 'com.zaxxer:HikariCP:5.0.1'

    // Add the MariaDB JDBC driver
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.2.0'

    //Mini Message
    implementation 'net.kyori:adventure-text-minimessage:4.14.0'

    compileOnly 'me.clip:placeholderapi:2.11.4'

    // Define a configuration for the lib folder
    configurations {
        lib
    }

    // Add the lib folder as a runtime dependency for the Minecraft server
    dependencies {
        runtimeOnly files(configurations.lib.collect { "${project.projectDir}/lib/${it.name}" })
    }

    shadowJar {
        // Relocate the HikariCP package
        relocate 'com.zaxxer.hikari', 'xyz.hynse.hyeconomy.hikari'
        // Relocate the PlaceholderAPI package
        relocate 'me.clip:placeholderapi', 'xyz.hynse.hyeconomy.placeholderapi'
    }
}

publishing {
    repositories {
        maven {
            name = "HynseAPI"
            url = uri("https://repo.hynse.xyz/releases")
            credentials {
                authentication {
                    username = project.findProperty("HynseRepositoryUsername")
                    password = project.findProperty("HynseRepositoryPassword")
                }
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            groupId = group
            artifactId = project.findProperty("HynseRepositoryArtifact")
            version = project.version
            from(components["java"])
        }
    }
}
javadoc {
    destinationDir = file("${buildDir}/javadocs")
    source = sourceSets.main.allJava
}



def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

// Define a new configuration 'libConfig' that extends 'implementation' and is resolvable
configurations {
    libConfig {
        canBeResolved = true
        extendsFrom implementation
    }
}


// Define the task to copy the MariaDB JDBC driver to the lib folder
tasks.register('copyMariaDBDriver', Copy) {
    from configurations.libConfig
    into 'lib'
}

// Ensure that the copy task is executed before building the shadow JAR
shadowJar.dependsOn copyMariaDBDriver

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

tasks.register('deploy', Exec) {
    dependsOn shadowJar

    // Build the destination directory based on group and version
    def destinationDir = "/home/mid/hynse/devtest/plugins/"

    commandLine 'scp', '-i', "~/.ssh/lynse", '-P', '24', "./build/libs/${project.name}-${project.version}-all.jar", "mid@ssh.lynse:${destinationDir}"
}


tasks.register('installondevtest') {
    dependsOn 'build', 'jar', 'shadowJar', 'deploy'
}